@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Radios.Demo.Models
@using Microsoft.AspNetCore.Components.Forms

@inject ILogger<Index> Logger

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="text-center mb-4">
                <img src="https://user-images.githubusercontent.com/4441470/224455560-91ed3ee7-f510-4041-a8d2-3fc093025112.png" class="mb-3" style="max-width: 200px;" />
                <h1>Soenneker.Quark.Radios Demo</h1>
                <p class="lead">Comprehensive examples with forms and various states</p>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Basic Usage -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Basic Usage</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Simple radio button group with manual state management</p>
                    
                    <div class="form-check">
                        <Radio Name="basicGroup" Value="Option1" Checked="@(_basicSelected == "Option1")" OnClick="@(() => SelectBasic("Option1"))" />
                        <label class="form-check-label">Option 1</label>
                    </div>
                    <div class="form-check">
                        <Radio Name="basicGroup" Value="Option2" Checked="@(_basicSelected == "Option2")" OnClick="@(() => SelectBasic("Option2"))" />
                        <label class="form-check-label">Option 2</label>
                    </div>
                    <div class="form-check">
                        <Radio Name="basicGroup" Value="Option3" Checked="@(_basicSelected == "Option3")" OnClick="@(() => SelectBasic("Option3"))" />
                        <label class="form-check-label">Option 3</label>
                    </div>

                    <div class="mt-3">
                        <small class="text-muted">Selected: <strong>@_basicSelected</strong></small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quark.Validations Example -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Quark.Validations Example</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Radio buttons with Quark.Validations integration</p>
                    
                    <Validation @ref="_validation" Validator="@ValidatePreference">
                        <div class="form-check">
                            <Radio Name="validationGroup" Value="Beginner" Checked="@(_validatedPreference == "Beginner")" OnClick="@(() => SelectValidated("Beginner"))" />
                            <label class="form-check-label">Beginner</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="validationGroup" Value="Intermediate" Checked="@(_validatedPreference == "Intermediate")" OnClick="@(() => SelectValidated("Intermediate"))" />
                            <label class="form-check-label">Intermediate</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="validationGroup" Value="Advanced" Checked="@(_validatedPreference == "Advanced")" OnClick="@(() => SelectValidated("Advanced"))" />
                            <label class="form-check-label">Advanced</label>
                        </div>
                        
                        @if (_validation?.Status == ValidationStatus.Error)
                        {
                            <div class="invalid-feedback d-block">
                                @string.Join(", ", _validation.Messages ?? new List<string>())
                            </div>
                        }
                        else if (_validation?.Status == ValidationStatus.Success)
                        {
                            <div class="valid-feedback d-block">
                                Great choice!
                            </div>
                        }
                    </Validation>

                    <div class="mt-3">
                        <button class="btn btn-sm btn-outline-primary" @onclick="@ValidateSelection">Validate Selection</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@ClearValidation">Clear</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Required Selection (must be checked) -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Required Selection</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">This radio group must have a selection. If nothing is checked it fails validation.</p>

                    <Validation @ref="_requiredValidation" Validator="@ValidateRequired">
                        <div class="form-check">
                            <Radio Name="requiredGroup" Value="Alpha" Checked="@(_requiredSelected == "Alpha")" OnClick="@(() => _requiredSelected = "Alpha")" />
                            <label class="form-check-label">Alpha</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="requiredGroup" Value="Beta" Checked="@(_requiredSelected == "Beta")" OnClick="@(() => _requiredSelected = "Beta")" />
                            <label class="form-check-label">Beta</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="requiredGroup" Value="Gamma" Checked="@(_requiredSelected == "Gamma")" OnClick="@(() => _requiredSelected = "Gamma")" />
                            <label class="form-check-label">Gamma</label>
                        </div>

                        @if (_requiredValidation?.Status == ValidationStatus.Error)
                        {
                            <div class="invalid-feedback d-block">
                                @string.Join(", ", _requiredValidation.Messages ?? new List<string>())
                            </div>
                        }
                        else if (_requiredValidation?.Status == ValidationStatus.Success)
                        {
                            <div class="valid-feedback d-block">
                                Looks good.
                            </div>
                        }
                    </Validation>

                    <div class="mt-3">
                        <button class="btn btn-sm btn-outline-primary" @onclick="@ValidateRequiredSelection">Validate Required</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@ClearRequiredValidation">Clear</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Form with EditForm -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Form Integration</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Radio buttons integrated with EditForm and data annotations</p>
                    
                    <EditForm Model="@_formModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Subscription Plan <span class="text-danger">*</span></label>
                            <div class="form-check">
                                <Radio Name="subscription" Value="@SubscriptionPlan.Free.ToString()" 
                                       Checked="@(_formModel.SubscriptionPlan == SubscriptionPlan.Free.ToString())" 
                                       OnClick="@(() => _formModel.SubscriptionPlan = SubscriptionPlan.Free.ToString())" />
                                <label class="form-check-label">Free</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="subscription" Value="@SubscriptionPlan.Basic.ToString()" 
                                       Checked="@(_formModel.SubscriptionPlan == SubscriptionPlan.Basic.ToString())" 
                                       OnClick="@(() => _formModel.SubscriptionPlan = SubscriptionPlan.Basic.ToString())" />
                                <label class="form-check-label">Basic ($9.99/month)</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="subscription" Value="@SubscriptionPlan.Premium.ToString()" 
                                       Checked="@(_formModel.SubscriptionPlan == SubscriptionPlan.Premium.ToString())" 
                                       OnClick="@(() => _formModel.SubscriptionPlan = SubscriptionPlan.Premium.ToString())" />
                                <label class="form-check-label">Premium ($19.99/month)</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="subscription" Value="@SubscriptionPlan.Enterprise.ToString()" 
                                       Checked="@(_formModel.SubscriptionPlan == SubscriptionPlan.Enterprise.ToString())" 
                                       OnClick="@(() => _formModel.SubscriptionPlan = SubscriptionPlan.Enterprise.ToString())" />
                                <label class="form-check-label">Enterprise (Contact Sales)</label>
                            </div>
                            <ValidationMessage For="@(() => _formModel.SubscriptionPlan)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Experience Level <span class="text-danger">*</span></label>
                            <div class="form-check">
                                <Radio Name="experience" Value="@ExperienceLevel.Beginner.ToString()" 
                                       Checked="@(_formModel.ExperienceLevel == ExperienceLevel.Beginner.ToString())" 
                                       OnClick="@(() => _formModel.ExperienceLevel = ExperienceLevel.Beginner.ToString())" />
                                <label class="form-check-label">Beginner</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="experience" Value="@ExperienceLevel.Intermediate.ToString()" 
                                       Checked="@(_formModel.ExperienceLevel == ExperienceLevel.Intermediate.ToString())" 
                                       OnClick="@(() => _formModel.ExperienceLevel = ExperienceLevel.Intermediate.ToString())" />
                                <label class="form-check-label">Intermediate</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="experience" Value="@ExperienceLevel.Advanced.ToString()" 
                                       Checked="@(_formModel.ExperienceLevel == ExperienceLevel.Advanced.ToString())" 
                                       OnClick="@(() => _formModel.ExperienceLevel = ExperienceLevel.Advanced.ToString())" />
                                <label class="form-check-label">Advanced</label>
                            </div>
                            <div class="form-check">
                                <Radio Name="experience" Value="@ExperienceLevel.Expert.ToString()" 
                                       Checked="@(_formModel.ExperienceLevel == ExperienceLevel.Expert.ToString())" 
                                       OnClick="@(() => _formModel.ExperienceLevel = ExperienceLevel.Expert.ToString())" />
                                <label class="form-check-label">Expert</label>
                            </div>
                            <ValidationMessage For="@(() => _formModel.ExperienceLevel)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary">Submit Form</button>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Disabled States -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Disabled States</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Examples of disabled radio buttons</p>
                    
                    <div class="mb-3">
                        <label class="form-label">Notification Preferences</label>
                        <div class="form-check">
                            <Radio Name="notifications" Value="Email" Checked="@(_notificationPreference == "Email")" 
                                   OnClick="@(() => _notificationPreference = "Email")" />
                            <label class="form-check-label">Email</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="notifications" Value="SMS" Checked="@(_notificationPreference == "SMS")" 
                                   OnClick="@(() => _notificationPreference = "SMS")" />
                            <label class="form-check-label">SMS</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="notifications" Value="Push" Checked="@(_notificationPreference == "Push")" 
                                   OnClick="@(() => _notificationPreference = "Push")" Disabled="true" />
                            <label class="form-check-label text-muted">Push (Coming Soon)</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="notifications" Value="None" Checked="@(_notificationPreference == "None")" 
                                   OnClick="@(() => _notificationPreference = "None")" Disabled="true" />
                            <label class="form-check-label text-muted">None (Disabled)</label>
                        </div>
                    </div>

                    <div class="mt-3">
                        <small class="text-muted">Selected: <strong>@_notificationPreference</strong></small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Event Handling Examples -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Event Handling</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Radio buttons with different event handling patterns</p>
                    
                    <div class="mb-3">
                        <label class="form-label">Color Preference</label>
                        <div class="form-check">
                            <Radio Name="colors" Value="Red" Checked="@(_colorPreference == "Red")" 
                                   OnClick="@(() => SelectColor("Red"))" />
                            <label class="form-check-label">Red</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="colors" Value="Green" Checked="@(_colorPreference == "Green")" 
                                   OnClick="@(() => SelectColor("Green"))" />
                            <label class="form-check-label">Green</label>
                        </div>
                        <div class="form-check">
                            <Radio Name="colors" Value="Blue" Checked="@(_colorPreference == "Blue")" 
                                   OnClick="@(() => SelectColor("Blue"))" />
                            <label class="form-check-label">Blue</label>
                        </div>
                    </div>

                    <div class="mt-3">
                        <small class="text-muted">Selected: <strong>@_colorPreference</strong></small>
                        <br />
                        <small class="text-muted">Last clicked: <strong>@_lastClicked</strong></small>
                        <br />
                        <small class="text-muted">Click count: <strong>@_clickCount</strong></small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Async Validation Example -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">Async Validation Example</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Radio buttons with asynchronous validation (simulates server-side validation)</p>
                    
                    <Validation @ref="_asyncValidation" AsyncValidator="@ValidateAsync">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <Radio Name="asyncGroup" Value="Option1" Checked="@(_asyncSelected == "Option1")" 
                                           OnClick="@(() => SelectAsync("Option1"))" />
                                    <label class="form-check-label">Option 1</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <Radio Name="asyncGroup" Value="Option2" Checked="@(_asyncSelected == "Option2")" 
                                           OnClick="@(() => SelectAsync("Option2"))" />
                                    <label class="form-check-label">Option 2</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <Radio Name="asyncGroup" Value="Option3" Checked="@(_asyncSelected == "Option3")" 
                                           OnClick="@(() => SelectAsync("Option3"))" />
                                    <label class="form-check-label">Option 3</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <Radio Name="asyncGroup" Value="Invalid" Checked="@(_asyncSelected == "Invalid")" 
                                           OnClick="@(() => SelectAsync("Invalid"))" />
                                    <label class="form-check-label">Invalid Option</label>
                                </div>
                            </div>
                        </div>
                        
                        @if (_asyncValidation?.Status == ValidationStatus.Error)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>Validation Error:</strong> @string.Join(", ", _asyncValidation.Messages ?? new List<string>())
                            </div>
                        }
                        else if (_asyncValidation?.Status == ValidationStatus.Success)
                        {
                            <div class="alert alert-success mt-3">
                                <strong>Success:</strong> @string.Join(", ", _asyncValidation.Messages ?? new List<string>())
                            </div>
                        }
                        else if (_isValidating)
                        {
                            <div class="alert alert-info mt-3">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                Validating...
                            </div>
                        }
                    </Validation>

                    <div class="mt-3">
                        <button class="btn btn-sm btn-outline-primary" @onclick="@ValidateAsyncSelection" disabled="@_isValidating">
                            Validate Async
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@ClearAsyncValidation">Clear</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dynamic Radio Groups -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Dynamic Radio Groups</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Radio buttons generated dynamically from data</p>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Programming Languages</label>
                            @foreach (var language in _programmingLanguages)
                            {
                                <div class="form-check">
                                    <Radio Name="languages" Value="@language" 
                                           Checked="@(_selectedLanguage == language)" 
                                           OnClick="@(() => SelectLanguage(language))" />
                                    <label class="form-check-label">@language</label>
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Frameworks</label>
                            @foreach (var framework in _frameworks)
                            {
                                <div class="form-check">
                                    <Radio Name="frameworks" Value="@framework" 
                                           Checked="@(_selectedFramework == framework)" 
                                           OnClick="@(() => SelectFramework(framework))" />
                                    <label class="form-check-label">@framework</label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mt-3">
                        <div class="row">
                            <div class="col-md-6">
                                <small class="text-muted">Selected Language: <strong>@_selectedLanguage</strong></small>
                            </div>
                            <div class="col-md-6">
                                <small class="text-muted">Selected Framework: <strong>@_selectedFramework</strong></small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Results -->
    @if (!string.IsNullOrEmpty(_formResult))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-success">
                    <h6>Form Submitted Successfully!</h6>
                    <pre class="mb-0">@_formResult</pre>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string _basicSelected = "Option2";
    private string _validatedPreference = "";
    private string _asyncSelected = "";
    private string _notificationPreference = "Email";
    private string _colorPreference = "";
    private string _lastClicked = "";
    private int _clickCount = 0;
    private string _selectedLanguage = "";
    private string _selectedFramework = "";
    private string _formResult = "";
    private bool _isValidating = false;

    private string _requiredSelected = "";

    private RadioDemoModel _formModel = new();
    private Validation? _validation;
    private Validation? _asyncValidation;
    private Validation? _requiredValidation;

    private readonly List<string> _programmingLanguages = new()
    {
        "C#", "JavaScript", "Python", "Java", "TypeScript", "Go", "Rust"
    };

    private readonly List<string> _frameworks = new()
    {
        "Blazor", "React", "Vue.js", "Angular", "ASP.NET Core", "Node.js", "Django"
    };

    protected override void OnInitialized()
    {
        // Initialize form model with default values
        _formModel.SubscriptionPlan = SubscriptionPlan.Free.ToString();
        _formModel.ExperienceLevel = ExperienceLevel.Beginner.ToString();
    }

    private void SelectBasic(string value)
    {
        _basicSelected = value;
        StateHasChanged();
    }

    private void SelectValidated(string value)
    {
        _validatedPreference = value;
        StateHasChanged();
    }

    private void SelectAsync(string value)
    {
        _asyncSelected = value;
        StateHasChanged();
    }

    private void SelectColor(string color)
    {
        _colorPreference = color;
        _lastClicked = color;
        _clickCount++;
        StateHasChanged();
    }

    private void SelectLanguage(string language)
    {
        _selectedLanguage = language;
        StateHasChanged();
    }

    private void SelectFramework(string framework)
    {
        _selectedFramework = framework;
        StateHasChanged();
    }

    private void ValidateRequired(ValidatorEventArgs e)
    {
        if (string.IsNullOrEmpty(_requiredSelected))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please select an option";
        }
        else
        {
            e.Status = ValidationStatus.Success;
            e.ErrorText = "";
        }
    }

    private async Task ValidateRequiredSelection()
    {
        if (_requiredValidation != null)
        {
            await _requiredValidation.ValidateAsync();
        }
    }

    private void ClearRequiredValidation()
    {
        _requiredValidation?.Clear();
        _requiredSelected = "";
        StateHasChanged();
    }

    private void ValidatePreference(ValidatorEventArgs e)
    {
        if (string.IsNullOrEmpty(_validatedPreference))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please select a preference";
        }
        else if (_validatedPreference == "Advanced")
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Advanced option is not available yet";
        }
        else
        {
            e.Status = ValidationStatus.Success;
            e.ErrorText = "Valid selection";
        }
    }

    private async Task ValidateAsync(ValidatorEventArgs e, CancellationToken cancellationToken)
    {
        _isValidating = true;
        StateHasChanged();

        // Simulate async validation delay
        await Task.Delay(1500, cancellationToken);

        if (string.IsNullOrEmpty(_asyncSelected))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please select an option";
        }
        else if (_asyncSelected == "Invalid")
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "This option is not valid according to server validation";
        }
        else
        {
            e.Status = ValidationStatus.Success;
            e.ErrorText = $"Option '{_asyncSelected}' is valid and available";
        }

        _isValidating = false;
        StateHasChanged();
    }

    private async Task ValidateSelection()
    {
        if (_validation != null)
        {
            await _validation.ValidateAsync();
        }
    }

    private void ClearValidation()
    {
        _validation?.Clear();
        _validatedPreference = "";
        StateHasChanged();
    }

    private async Task ValidateAsyncSelection()
    {
        if (_asyncValidation != null)
        {
            await _asyncValidation.ValidateAsync();
        }
    }

    private void ClearAsyncValidation()
    {
        _asyncValidation?.Clear();
        _asyncSelected = "";
        _isValidating = false;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        _formResult = $@"Form Data:
- Subscription Plan: {_formModel.SubscriptionPlan}
- Experience Level: {_formModel.ExperienceLevel}
- Agree to Terms: {_formModel.AgreeToTerms}
- Notification Preference: {_formModel.NotificationPreference}

Form submitted at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
        StateHasChanged();
    }
}